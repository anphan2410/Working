Option Compare Database

#Const anDebugEnabled = 1

Public Sub anMsg(msg As String)
    #If anDebugEnabled Then
        Debug.Print msg
    #End If
End Sub

Public Sub anInfo(msg As String)
    #If anDebugEnabled Then
        Debug.Print "=> " & msg
    #End If
End Sub

Public Function LastDataCellOfAColumn(ARangeOfASingleColumn As Excel.Range, ParentWS As Excel.Worksheet) As Excel.Range
    Set LastDataCellOfAColumn = ParentWS.Cells(ParentWS.Rows.Count, ARangeOfASingleColumn.Column).End(xlUp)
End Function

Public Function LastDataCellOfARow(ARangeOfASingleRow As Excel.Range, ParentWS As Excel.Worksheet) As Excel.Range
    Set LastDataCellOfARow = ParentWS.Cells(ARangeOfASingleRow.Row, ParentWS.Columns.Count).End(xlToLeft)
End Function

Public Function FirstDataRowNumberWithSomeAdjacentBoldCells(ExcelWS As Excel.Worksheet, QuantityOfAdjacentBoldCells As Integer) As Integer
    Dim i As Integer
    Dim j As Integer
    For i = 1 To LastDataCellOfAColumn(ExcelWS.Columns(1), ExcelWS).Row Step 1
        If ExcelWS.Cells(i, 1).Font.Bold = True Then
            For j = 2 To QuantityOfAdjacentBoldCells Step 1
                If ExcelWS.Cells(i, j).Font.Bold = False Then
                    Exit For
                End If
            Next
            If j > QuantityOfAdjacentBoldCells Then
                FirstDataRowNumberWithSomeAdjacentBoldCells = i
                Exit Function
            End If
        End If
    Next
    FirstDataRowNumberWithSomeAdjacentBoldCells = -1
End Function


Public Function Get1stIndInInt(ByVal myInt As Integer, ByRef myIntArr() As Integer) As Integer
    Dim i As Integer
    Get1stIndInInt = 0
    For i = 0 To UBound(myIntArr)
        If myIntArr(i) = myInt Then
            Get1stIndInInt = i
            Exit Function
        End If
    Next
    Get1stIndInInt = -1
End Function

Function InStrAll(ByRef S As String, S1 As String, Optional compareMode As VbCompareMethod = vbBinaryCompare) As Integer()
'Return an array of index number of all occurences (if have) of sub-string S1 within string S
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    j = 0
    Dim Tmp() As Integer
    ReDim Tmp(Len(S)) As Integer
    k = -1
    For i = 1 To Len(S)
        j = InStr(j + 1, S, S1, compareMode)
        If j > 0 Then
            k = k + 1
            Tmp(k) = j
        Else
            Exit For
        End If
    Next
    If k <= 0 Then
        k = 0
    End If
    Dim tmp2() As Integer
    ReDim tmp2(k) As Integer
    For i = 0 To k
        tmp2(i) = Tmp(i)
    Next
    InStrAll = tmp2
End Function

Public Function ZeroIntArr(n As Integer) As Integer()
    ReDim ZeroIntArr(n)
End Function

Public Function IntArr0Pad(IntArrSrc() As Integer, ByVal n As Integer) As Integer()
    Dim i, m As Integer
    Dim Tmp() As Integer
    ReDim Tmp(n)
    m = UBound(IntArrSrc)
    If m > n Then
        m = n
    End If
    For i = 0 To m
        Tmp(i) = IntArrSrc(i)
    Next
    If m < n Then
        For i = (m + 1) To n
            Tmp(i) = 0
        Next
    End If
    IntArr0Pad = Tmp
End Function

Public Function ExistFreq(Str1 As String, Str2 As String, Optional compareMode As VbCompareMethod = vbBinaryCompare) As Double
'This function returns a double number representing the likelihood rate of two string
'The higher is the return value, the more likely are the two strings
    Dim S1 As String
    Dim S As String
    Dim S2 As String
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim n As Integer
    Dim l As Integer
    Dim m() As Integer
    Dim Tmp() As Integer
    Dim tmpold() As Integer
    ExistFreq = 0
    If Len(Str1) > Len(Str2) Then
        S1 = Str2
        S = Str1
    Else
        S = Str2
        S1 = Str1
    End If
    S = Trim(S)
    S1 = Trim(S1)
    If S <> "" And S1 <> "" Then
        n = Len(S1)
        l = Len(S)
        k = -1
        i = 1
        j = 0
        S2 = Left(S1, 1)
        ReDim m(n, 1)
        ReDim Tmp(n) As Integer
        ReDim tmpold(n) As Integer
        Do While j < 2
            tmpold = Tmp
            Tmp = IntArr0Pad(InStrAll(S, S2, compareMode), n)
            If Tmp(0) = 0 Then
                If tmpold(0) > 0 Then
                    S2 = Left(S2, Len(S2) - 1)
                    k = k + 1
                    m(k, 0) = Len(S2)
                    m(k, 1) = Get1stIndInInt(0, tmpold)
                    S = Replace(S, S2, "")
                End If
                S1 = Replace(S1, S2, "")
                S2 = ""
                i = 0
            End If
            i = i + 1
            S2 = S2 & Mid(S1, i, 1)
            If Mid(S1, i, 1) = "" Then
                j = j + 1
                S2 = S2 & Chr(7)
            End If
        Loop
        For i = 0 To k
            ExistFreq = ExistFreq + m(i, 0) * m(i, 1) * m(i, 0)
        Next
        ExistFreq = ExistFreq / n / l
    End If
End Function

Public Function NumBase(Base() As Integer, ByVal NumBase10 As Long) As Integer()
'This function returns an array of numbers representing for a number transfer from base 10 NumBase10
'but the number is required not to exceed the maximum number that can be generated from the given base
'For example, Base(1,1,1) will stands for a range of three bits binary number from 000 to 111 or 0Dec To 7Dec = (2*2*2-1)Dec
'For example, Base(3,7,6) will stands for a range of three bits number with different base at every unit level _
'Base(3,7,6) contains number with value from 000 To 376 or 0Dec10 To (4*8*7-1)Dec=224Dec
'If NumBase10 variable exceeds the maximum number of Base(), the function will return an array with a OPPOSITE sign on first number
'For example, NumBase((1,1,1),3) = (0,1,1) but NumBase((1,1,1),10) = (-2,1,0) Cause 10Dec=1010Bin
'For ex., NumBase((6,4,5),7*5*6-1) = (6,4,5) but NumBase((6,4,5),7*5*6)= (-7,0,0) or NumBase((6,4,5),-7*5*6)= (7,0,0)
    Dim i As Integer
    Dim j As Long
    Dim Mul() As Integer
    Dim Result() As Integer
    ReDim Mul(UBound(Base))
    ReDim Result(UBound(Base))
    For i = 0 To UBound(Base)
        Mul(i) = 1
        For j = (i + 1) To UBound(Base)
            Mul(i) = Mul(i) * (Base(j) + 1)
        Next
    Next
    j = NumBase10
    For i = 0 To UBound(Base)
        Result(i) = j \ Mul(i)
        j = j Mod Mul(i)
    Next
    If Abs(Result(0)) > Base(0) Then
        Result(0) = -Result(0)
    End If
    NumBase = Result
End Function

Public Function DictGen(RawDict As Variant) As Variant
'This function returns an array of three different variables: a name, number of values associated with the name _
', and a collection of all possible values. DictGen=Array(SenName,SenRng,Collection)
'A RawDict is required to have a following form: Dict=Array(Sentence1,Sentence2,Sentence3,...,SentenceN) _
'A Sentence contains its Name and its words: Sentence=Array("Name",WordPosition1,WordPosition2,WordPosition3,...,WordPositionN) _
'Every Word Position must be defined as: Word=Array("PossibleValue1","PossibleValue2",...,"PossibleValueN")
'For Ex.,Dict = Array(  Array("OBS", Array("OSP", "SMFG"), Array("-", "--"), Array("Obsolescence"), Array("-", "--"), Array("PN")), _
                        Array("CIP", Array("OSP"), Array("-", " - "), Array("CIP")), _
                        Array("DOC", Array("HD"), Array("-", " -- "), Array("PN"))                                                  )
'Will generate a Dictionary equivalently to the following command: (this just used for imagination of the result)
'DictGen=Array(Array("OBS","CIP","DOC"),Array(8,2,2),New Collection{"OBS-Obsolescence-PN","OBS-Obsolescence--PN", ..., "HD -- PN"})
    Dim Sen As Variant
    Dim TmpStr As String
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim SenName() As String
    Dim SenRng() As Integer
    Dim Output As New Collection
    ReDim SenName(UBound(RawDict))
    ReDim SenRng(UBound(RawDict))
    For i = 0 To UBound(RawDict)
        j = UBound(RawDict(i))
        If j > k Then
            k = j
        End If
    Next
    Dim WordMax() As Integer
    Dim WordInd() As Integer
    ReDim WordMax(k - 1)
    ReDim WordInd(k - 1)
    For i = 0 To UBound(RawDict)
        SenName(i) = RawDict(i)(0)
        WordMax = ZeroIntArr(UBound(WordInd))
        k = 1
        For j = 1 To UBound(RawDict(i))
            WordMax(j - 1) = UBound(RawDict(i)(j))
            k = k * (WordMax(j - 1) + 1)
        Next
        SenRng(i) = k
        For j = 0 To k - 1
            TmpStr = ""
            WordInd = NumBase(WordMax, j)
            For k = 1 To UBound(RawDict(i))
                TmpStr = TmpStr & CStr(RawDict(i)(k)(WordInd(k - 1)))
            Next
            Output.Add (TmpStr)
        Next
    Next
    DictGen = Array(SenName, SenRng, Output)
End Function

Public Function Classify(Dict As Variant, Str As String, Optional Mode As Integer = 0, Optional compareMode As VbCompareMethod = vbBinaryCompare) As String
'This function returns a string that represents a best-guess matched NameString of the given Str based on Dict (dictionary)
'This function is recommended to be used after having a Dict generated from the function DictGen, please find and read
'In case someone needs to directly define a Dict, a Dict must follow the format: an array of three different variables: _
'a name, number of values associated with the name, and a collection of all possible values.
'For ex., DictGen=Array(Array("OBS","CIP","DOC"),Array(8,2,2),New Collection{"OBS-Obsolescence-PN","OBS-Obsolescence--PN", ..., "HD -- PN"})
'DictGen=Array(<Array Of NameString>,<Array Of Number Of Value Associated With Corresponding NameString>,<All Possible Values>)
'Mode 0 = exact search first then fuzzy search, Mode 1 = only exact search, Mode 2 = only fuzzy search
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    If Mode = 0 Then
        Dim Tmp As String
        Tmp = Classify(Dict, Str, 1)
        If Tmp <> "" Then
            Classify = Tmp
            Exit Function
        Else
            Classify = Classify(Dict, Str, 2)
        End If
    ElseIf Mode = 1 Then
        For i = 1 To Dict(2).Count
            If InStr(1, Str, Dict(2).Item(i), compareMode) > 0 Then
                k = 0
                For j = 0 To UBound(Dict(1))
                    k = k + Dict(1)(j)
                    If k >= i Then
                        Exit For
                    End If
                Next
                Classify = Dict(0)(j)
                Exit Function
            End If
        Next
    ElseIf Mode = 2 Then
        Dim m As Double
        Dim n As Double
        For j = 1 To Dict(2).Count
            n = ExistFreq(Dict(2).Item(j), Str, compareMode)
            If n > m Then
                m = n
                k = j
            End If
        Next
        i = 0
        For j = 0 To UBound(Dict(1))
            i = i + Dict(1)(j)
            If i >= k Then
                Exit For
            End If
        Next j
        Classify = Dict(0)(j)
        Exit Function
    End If
End Function

Public Sub nowDbExecSQL(sqlStatement As String, Optional DAOCurrentDbExecuteOption As RecordsetOptionEnum = dbFailOnError)
    anMsg "_________________________________________________________________________________________________" & Chr(10)
    anMsg sqlStatement
    anMsg "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -" & Chr(10)
    Application.CurrentDb.Execute sqlStatement, DAOCurrentDbExecuteOption
End Sub

Public Sub sourceODCDB()
    anInfo "Enter sourceODCDB"
    Dim odcDB As DAO.Database

    Const srcTbl1Name As String = "srcARreport"
    Const srcTbl2Name As String = "srcEngRvwList"
    
    Set odcDB = Application.CurrentDb
    
    'Delete tables, but ignore the error if the tables doesn't exist
    anInfo "Delete old source tables"
    On Error Resume Next
        odcDB.TableDefs.Delete srcTbl1Name
    On Error GoTo 0
    On Error Resume Next
        odcDB.TableDefs.Delete srcTbl2Name
    On Error GoTo 0
    
    anInfo "Clear The 2 Source Tables"
    'DoCmd.SetNotices False
    DoCmd.RunSQL "DELETE * FROM [" & srcTbl1Name & "]"
    DoCmd.RunSQL "DELETE * FROM [" & srcTbl2Name & "]"
    'DoCmd.SetNotices True
    
    'Import tables from excel files
    anInfo "Import new source tables"
    DoCmd.TransferSpreadsheet acImport, acSpreadsheetTypeExcel12, srcTbl1Name, Application.CurrentProject.Path & "\AR_Report.xlsx", True, "ARs$A6:AI32767"
    DoCmd.TransferSpreadsheet acImport, acSpreadsheetTypeExcel8, srcTbl2Name, Application.CurrentProject.Path & "\ENG_RVW Priority Report.xls", True
    
    anInfo "Leave sourceODCDB"
    odcDB.Close
    Set odcDB = Nothing
End Sub

Private Sub Command0_Click()
    
    anInfo "Start Reading The 2 Source Excel Files"
    
    Dim ARreportFilePath As String
    ARreportFilePath = Application.CurrentProject.Path & "\AR_Report.xlsx"
    Dim EngRvwListFilePath As String
    EngRvwListFilePath = Application.CurrentProject.Path & "\ENG_RVW Priority Report.xls"
    
    Dim xlApp As New Excel.Application
    Dim ARreportWB As Excel.Workbook
    Dim ARreport As Excel.Worksheet
    Dim EngRvwListWB As Excel.Workbook
    Dim EngRvwList As Excel.Worksheet
    On Error GoTo UnableToOpenFileARReport
    Set ARreportWB = xlApp.Workbooks.Open(ARreportFilePath, , True, , , , True, , , False, False, , False)
    Set ARreport = ARreportWB.Worksheets(1)
    On Error GoTo UnableToOpenFileEngRvwList
    Set EngRvwListWB = xlApp.Workbooks.Open(EngRvwListFilePath, , True, , , , True, , , False, False, , False)
    Set EngRvwList = EngRvwListWB.Worksheets(1)
    On Error GoTo 0
    
    'Notify User
    If ARreport Is Nothing Then
        MsgBox "Unable To Read The File AR Report At" & Chr(10) & Chr(9) & ARreportFilePath
        Exit Sub
    End If
    'Notify User
    If EngRvwList Is Nothing Then
        MsgBox "Unable To Read The File EngRvw List At" & Chr(10) & Chr(9) & EngRvwListFilePath
        Exit Sub
    End If
    
    Dim tmpRng As Excel.Range
    
    anInfo "Reference Necessary Fields In ARreport"
    
    Dim ARreportHeaderRowNumber As Integer
    ARreportHeaderRowNumber = FirstDataRowNumberWithSomeAdjacentBoldCells(ARreport, Fix((ARreport.UsedRange.Columns.Count + 1) / 3))
    'Notify User
    If ARreportHeaderRowNumber <= 0 Then
        MsgBox "ERROR: Unable To Parse Header Line In File AR Report"
        Exit Sub
    End If
    Set tmpRng = ARreport.Range(ARreport.Cells(ARreportHeaderRowNumber, 1), LastDataCellOfARow(ARreport.Rows(ARreportHeaderRowNumber), ARreport))
    
    Dim ARreportFirstRecordIndex As Integer
    ARreportFirstRecordIndex = ARreportHeaderRowNumber + 1
    Dim ARreportLastRecordIndex As Integer
    ARreportLastRecordIndex = LastDataCellOfAColumn(ARreport.Columns(tmpRng.Find("ARID").Column), ARreport).Row
    
    Dim ARcol As New Collection
    On Error GoTo FailedToParseHeaderFieldsInARreport
    ARcol.Add Item:=ARreport.Columns(tmpRng.Find("ARID").Column), _
                Key:="ARID"
    ARcol.Add Item:=ARreport.Columns(tmpRng.Find("Problem statement").Column), _
                Key:="ProblemStatement"
    ARcol.Add Item:=ARreport.Columns(tmpRng.Find("Owner").Column), _
                Key:="AROwner"
    ARcol.Add Item:=ARreport.Columns(tmpRng.Find("Target date").Column), _
                Key:="TargetDate"
    ARcol.Add Item:=ARreport.Columns(tmpRng.Find("Last act. date").Column), _
                Key:="LastActiveDate"
    ARcol.Add Item:=ARreport.Columns(tmpRng.Find("Status").Column), _
                Key:="Status"
    ARcol.Add Item:=ARreport.Columns(tmpRng.Find("Approver").Column), _
                Key:="ARApprover"
    ARcol.Add Item:=ARreport.Columns(tmpRng.Find("Open date").Column), _
                Key:="OpenDate"
    ARcol.Add Item:=ARreport.Columns(tmpRng.Find("Date closed").Column), _
                Key:="CloseDate"
    ARcol.Add Item:=ARreport.Columns(tmpRng.Find("Last mod. time").Column), _
                Key:="LastModDate"
    ARcol.Add Item:=ARreport.Columns(tmpRng.Find("Detailed description").Column), _
                Key:="DetailedDescription"
    On Error GoTo 0
    anInfo "Reference Necessary Fields In EngRvwList"
                
    Dim EngRvwListHeaderRowNumber As Integer
    EngRvwListHeaderRowNumber = FirstDataRowNumberWithSomeAdjacentBoldCells(EngRvwList, Fix((EngRvwList.UsedRange.Columns.Count + 1) / 3))
    'Notify User
    If EngRvwListHeaderRowNumber <= 0 Then
        MsgBox "ERROR: Unable To Parse Header Line In File EngRvw List"
        Exit Sub
    End If
    Set tmpRng = EngRvwList.Range(EngRvwList.Cells(EngRvwListHeaderRowNumber, 1), LastDataCellOfARow(EngRvwList.Rows(EngRvwListHeaderRowNumber), EngRvwList))
    
    Dim EngRvwListFirstRecordIndex As Integer
    EngRvwListFirstRecordIndex = EngRvwListHeaderRowNumber + 1
    Dim EngRvwListLastRecordIndex As Integer
    EngRvwListLastRecordIndex = LastDataCellOfAColumn(EngRvwList.Columns(tmpRng.Find("AR Number").Column), EngRvwList).Row
    
    Dim ERcol As New Collection
    On Error GoTo FailedToParseHeaderFieldsInEngRvwList
    ERcol.Add Item:=EngRvwList.Columns(tmpRng.Find("Rank").Column), _
                Key:="Rank"
    ERcol.Add Item:=EngRvwList.Columns(tmpRng.Find("PRIME_PART").Column), _
                Key:="PrimePartNumber"
    ERcol.Add Item:=EngRvwList.Columns(tmpRng.Find("PART_DESCRIPTION").Column), _
                Key:="PrimePartDescription"
    ERcol.Add Item:=EngRvwList.Columns(tmpRng.Find("12M DMD").Column), _
                Key:="12MonthDemand"
    ERcol.Add Item:=EngRvwList.Columns(tmpRng.Find("Months of Supply").Column), _
                Key:="MonthOfSupply"
    ERcol.Add Item:=EngRvwList.Columns(tmpRng.Find("WWGOH").Column), _
                Key:="OnHandGood"
    ERcol.Add Item:=EngRvwList.Columns(tmpRng.Find("AR Number").Column), _
                Key:="ARID"
    On Error GoTo 0
    
    anInfo "Update Tables: Persons,AROwners,ARApprovers,ARs According To AR Report"
    
    Dim odcDB As DAO.Database
    Set odcDB = Application.CurrentDb
    
    Dim tmpRs As DAO.Recordset
    Dim scanRng As Excel.Range
    Dim tmpSplit() As String
    Dim tmpSqlValStr(1 To 5) As String
    Dim TmpStr As String
    Dim tmpStr1 As String
    Dim tmpStr2 As String
    Dim tmpStr3 As String
    Dim tmpInt As Integer
    Dim tmpInt1 As Integer
    Dim tmpInt2 As Integer
    Dim nowRowNum As Integer
    
    Dim idStatus As New Collection
    On Error GoTo UninitializedTableARStatus
    Set tmpRs = odcDB.OpenRecordset("SELECT * FROM ARStatus WHERE Status='Open';", dbOpenSnapshot)
    idStatus.Add Item:=tmpRs.Fields("ARStatusID").Value, Key:="Open"
    Set tmpRs = odcDB.OpenRecordset("SELECT * FROM ARStatus WHERE Status='Closure Requested';", dbOpenSnapshot)
    idStatus.Add Item:=tmpRs.Fields("ARStatusID").Value, Key:="Closure Requested"
    Set tmpRs = odcDB.OpenRecordset("SELECT * FROM ARStatus WHERE Status='Closed';", dbOpenSnapshot)
    idStatus.Add Item:=tmpRs.Fields("ARStatusID").Value, Key:="Closed"
    idStatus.Add Item:="NULL", Key:=""
    On Error GoTo 0
    
    Dim tmpVar As Variant
    tmpVar = DictGen(Array(Array("OBS", Array("OSP", "SMFG"), Array("-", " - "), Array("Obsolescence"), Array("-", " - "), Array("PN")), _
                        Array("KTS", Array("KTS-Obsolescence")), _
                        Array("KTPRO", Array("KTPro", "KTPRO")), _
                        Array("MES", Array("MES")), _
                        Array("FAI", Array("FAI"), Array("-", " - "), Array("KT", "PN")), _
                        Array("FAI", Array("OSP-FAI", "OSP - FAI")), _
                        Array("CIP", Array("OSP"), Array("-", " - "), Array("CIP")), _
                        Array("DOC", Array("DOC SUPPORT"), Array(" ", "-", " - "), Array("P/N", "PN")), _
                        Array("DOC", Array("DOC SUPPORT")), _
                        Array("HD", Array("HD"), Array("-", " - "), Array("PN")), _
                        Array("HD", Array("HD"))))
                        
    Dim idType As New Collection
    Set tmpRs = odcDB.OpenRecordset("SELECT * FROM ARTypes WHERE Abbreviation IS NOT NULL AND Abbreviation<>'';", dbOpenSnapshot)
    Do Until tmpRs.EOF
        idType.Add Item:=tmpRs.Fields("ARTypesID").Value, Key:=tmpRs.Fields("Abbreviation").Value
        tmpRs.MoveNext
    Loop
    If idType.Count < 8 Then
        MsgBox "Table ARTypes Is Not Initialized With Basic Records"
        Exit Sub
    End If
    idType.Add Item:="NULL", Key:=""
    
    Set scanRng = ARcol.Item("ARID").Range("A" & ARreportFirstRecordIndex & ":A" & ARreportLastRecordIndex)
    
    For Each tmpRng In scanRng
        nowRowNum = tmpRng.Row
        If Trim(CStr(tmpRng.Value)) <> "" Then
            '=================================================================
            'Update Table Persons According To ARreport.AROwner
            tmpSplit = Split(Replace(CStr(ARcol.Item("AROwner").Range("A" & nowRowNum).Value), "'", "''") & " ", "(", , vbBinaryCompare)
            'Parse FullName
            TmpStr = Trim(tmpSplit(0))
            If TmpStr = "" Then
                MsgBox "Notice: Missing AROwner At " & ARcol.Item("AROwner").Range("A" & nowRowNum).Address & " In AR Report"
                GoTo ContinueToNextARID
            End If
            'Parse KTDomainUserName
            tmpStr1 = ""
            If UBound(tmpSplit) = 1 Then
                tmpStr1 = tmpSplit(1)
                If InStr(1, tmpStr1, ")", vbBinaryCompare) Then
                    tmpStr1 = Trim(Replace(tmpStr1, ")", ""))
                Else
                    tmpStr1 = ""
                End If
            End If
            Set tmpRs = odcDB.OpenRecordset("SELECT * FROM Persons WHERE FullName='" & TmpStr & "';", dbOpenSnapshot)
            If tmpRs.EOF Then
                odcDB.Execute "INSERT INTO Persons (FullName,KTDomainUserName,RecordLastModTime) VALUES ('" & TmpStr _
                                    & "','" & tmpStr1 & "',Now());", dbFailOnError
                Set tmpRs = odcDB.OpenRecordset("SELECT * FROM Persons WHERE FullName='" & TmpStr & "';", dbOpenSnapshot)
            Else
                odcDB.Execute "UPDATE Persons SET KTDomainUserName='" & tmpStr1 & "',RecordLastModTime=Now() WHERE FullName='" & TmpStr _
                                    & "' AND (KTDomainUserName IS NULL OR KTDomainUserName<>'" & tmpStr1 & "');", dbFailOnError
            End If
            tmpInt = tmpRs!PersonsID
            'Update Table AROwners
            Set tmpRs = odcDB.OpenRecordset("SELECT * FROM AROwners WHERE PersonsID=" & tmpInt & ";", dbOpenSnapshot)
            If tmpRs.EOF Then
                odcDB.Execute "INSERT INTO AROwners (PersonsID,RecordLastModTime) VALUES (" & tmpInt & ",Now());", dbFailOnError
                Set tmpRs = odcDB.OpenRecordset("SELECT * FROM AROwners WHERE PersonsID=" & tmpInt & ";", dbOpenSnapshot)
            End If
            'Save Current AROwnersID To Update Table ARs Later
            tmpInt1 = tmpRs!AROwnersID
            '=================================================================
            'Update Table Persons According To ARreport.ARApprover
            tmpSplit = Split(Replace(CStr(ARcol.Item("ARApprover").Range("A" & nowRowNum).Value), "'", "''") & " ", "(", , vbBinaryCompare)
            'Parse FullName
            TmpStr = Trim(tmpSplit(0))
            If TmpStr = "" Then
                MsgBox "Notice: Missing ARApprover At " & ARcol.Item("ARApprover").Range("A" & nowRowNum).Address & " In AR Report"
                GoTo ContinueToNextARID
            End If
            'Parse KTDomainUserName
            tmpStr1 = ""
            If UBound(tmpSplit) = 1 Then
                tmpStr1 = tmpSplit(1)
                If InStr(1, tmpStr1, ")", vbBinaryCompare) Then
                    tmpStr1 = Trim(Replace(tmpStr1, ")", ""))
                Else
                    tmpStr1 = ""
                End If
            End If
            Set tmpRs = odcDB.OpenRecordset("SELECT * FROM Persons WHERE FullName='" & TmpStr & "';", dbOpenSnapshot)
            If tmpRs.EOF Then
                odcDB.Execute "INSERT INTO Persons (FullName,KTDomainUserName,RecordLastModTime) VALUES ('" & TmpStr _
                                    & "','" & tmpStr1 & "',Now());", dbFailOnError
                Set tmpRs = odcDB.OpenRecordset("SELECT * FROM Persons WHERE FullName='" & TmpStr & "';", dbOpenSnapshot)
            Else
                odcDB.Execute "UPDATE Persons SET KTDomainUserName='" & tmpStr1 & "',RecordLastModTime=Now() WHERE FullName='" & TmpStr _
                                    & "' AND (KTDomainUserName IS NULL OR KTDomainUserName<>'" & tmpStr1 & "');", dbFailOnError
            End If
            tmpInt = tmpRs!PersonsID
            'Update Table ARApprovers
            Set tmpRs = odcDB.OpenRecordset("SELECT * FROM ARApprovers WHERE PersonsID=" & tmpInt & ";", dbOpenSnapshot)
            If tmpRs.EOF Then
                odcDB.Execute "INSERT INTO ARApprovers (PersonsID,RecordLastModTime) VALUES (" & tmpInt & ",Now());", dbFailOnError
                Set tmpRs = odcDB.OpenRecordset("SELECT * FROM ARApprovers WHERE PersonsID=" & tmpInt & ";", dbOpenSnapshot)
            End If
            'Save Current ARApproversID To Update Table ARs Later
            tmpInt2 = tmpRs!ARApproversID
            '=================================================================
            'Update Table ARs According To ARreport
            TmpStr = Trim(CStr(tmpRng.Value))
            'Validate Date Extracted From ARreport
            tmpSqlValStr(1) = Trim(CStr(ARcol.Item("TargetDate").Range("A" & nowRowNum).Value))
            tmpSqlValStr(2) = Trim(CStr(ARcol.Item("LastActiveDate").Range("A" & nowRowNum).Value))
            tmpSqlValStr(3) = Trim(CStr(ARcol.Item("OpenDate").Range("A" & nowRowNum).Value))
            tmpSqlValStr(4) = Trim(CStr(ARcol.Item("CloseDate").Range("A" & nowRowNum).Value))
            tmpSqlValStr(5) = Trim(CStr(ARcol.Item("LastModDate").Range("A" & nowRowNum).Value))
            For tmpInt = 1 To 5 Step 1
                If tmpSqlValStr(tmpInt) = "" Then
                    tmpSqlValStr(tmpInt) = "NULL"
                Else
                    tmpSqlValStr(tmpInt) = "#" & Left(tmpSqlValStr(tmpInt), InStr(1, tmpSqlValStr(tmpInt), " ", vbBinaryCompare) - 1) & "#"
                End If
            Next
            Set tmpRs = odcDB.OpenRecordset("SELECT * FROM ARs WHERE ARID='" & TmpStr & "';", dbOpenSnapshot)
            If tmpRs.EOF Then
                tmpStr1 = Replace(CStr(ARcol.Item("ProblemStatement").Range("A" & nowRowNum).Value), "'", "''")
                odcDB.Execute "INSERT INTO ARs (ARID,ProblemStatement,AROwnersID,TargetDate,LastActiveDate,ARStatusID,ARApproversID,OpenDate,CloseDate,LastModDate,DetailedDescription,ARTypesID,RecordLastModTime) " _
                                & "VALUES ('" & TmpStr _
                                & "','" & tmpStr1 _
                                & "'," & tmpInt1 _
                                & "," & tmpSqlValStr(1) _
                                & "," & tmpSqlValStr(2) _
                                & "," & idStatus.Item(Trim(CStr(ARcol.Item("Status").Range("A" & nowRowNum).Value))) _
                                & "," & tmpInt2 _
                                & "," & tmpSqlValStr(3) _
                                & "," & tmpSqlValStr(4) _
                                & "," & tmpSqlValStr(5) _
                                & ",'" & Replace(CStr(ARcol.Item("DetailedDescription").Range("A" & nowRowNum).Value), "'", "''") _
                                & "'," & idType.Item(Classify(tmpVar, tmpStr1, 1, vbTextCompare)) _
                                & ",Now());", dbFailOnError
            Else
                tmpStr1 = CStr(ARcol.Item("ProblemStatement").Range("A" & nowRowNum).Value)
                If tmpStr1 <> tmpRs!ProblemStatement Then
                    odcDB.Execute "UPDATE ARs SET ARTypesID=" & idType.Item(Classify(tmpVar, tmpStr1, 1, vbTextCompare)) _
                                    & " WHERE ARID='" & TmpStr & "';", dbFailOnError
                End If
                tmpStr1 = Replace(tmpStr1, "'", "''")
                tmpStr2 = Trim(CStr(ARcol.Item("Status").Range("A" & nowRowNum).Value))
                tmpStr3 = Replace(CStr(ARcol.Item("DetailedDescription").Range("A" & nowRowNum).Value), "'", "''")
                odcDB.Execute "UPDATE ARs " _
                                & "SET ProblemStatement='" & tmpStr1 _
                                & "',AROwnersID=" & tmpInt1 _
                                & ",TargetDate=" & tmpSqlValStr(1) _
                                & ",LastActiveDate=" & tmpSqlValStr(2) _
                                & ",ARStatusID=" & idStatus.Item(tmpStr2) _
                                & ",ARApproversID=" & tmpInt2 _
                                & ",OpenDate=" & tmpSqlValStr(3) _
                                & ",CloseDate=" & tmpSqlValStr(4) _
                                & ",LastModDate=" & tmpSqlValStr(5) _
                                & ",DetailedDescription='" & tmpStr3 _
                                & "',RecordLastModTime=Now() " _
                                & "WHERE ARID='" & TmpStr _
                                & "' AND (ProblemStatement IS NULL OR ProblemStatement<>'" & tmpStr1 _
                                & "' OR AROwnersID IS NULL OR AROwnersID<>" & tmpInt1 _
                                & " OR TargetDate " & IIf(tmpSqlValStr(1) = "NULL", "IS NOT NULL", "IS NULL OR TargetDate<>" & tmpSqlValStr(1)) _
                                & " OR LastActiveDate " & IIf(tmpSqlValStr(2) = "NULL", "IS NOT NULL", "IS NULL OR LastActiveDate<>" & tmpSqlValStr(2)) _
                                & " OR ARStatusID IS NULL OR ARStatusID<>" & idStatus.Item(tmpStr2) _
                                & " OR ARApproversID IS NULL OR ARApproversID<>" & tmpInt2 _
                                & " OR OpenDate " & IIf(tmpSqlValStr(3) = "NULL", "IS NOT NULL", "IS NULL OR OpenDate<>" & tmpSqlValStr(3)) _
                                & " OR CloseDate " & IIf(tmpSqlValStr(4) = "NULL", "IS NOT NULL", "IS NULL OR CloseDate<>" & tmpSqlValStr(4)) _
                                & " OR LastModDate " & IIf(tmpSqlValStr(5) = "NULL", "IS NOT NULL", "IS NULL OR LastModDate<>" & tmpSqlValStr(5)) _
                                & " OR DetailedDescription IS NULL OR DetailedDescription<>'" & tmpStr3 _
                                & "');", dbFailOnError
            End If
        Else
            MsgBox "Notice: Missing ARID At " & tmpRng.Address & " In AR Report"
        End If
ContinueToNextARID:
    Next
    
    anInfo "Update Tables ARs According To EngRvwList"
    '=================================================================
    'Update Table ARs According To EngRvwList
    Set tmpRs = odcDB.OpenRecordset("SELECT * FROM ARs WHERE ARID IS NOT NULL;", dbOpenSnapshot)
    Do Until tmpRs.EOF
        TmpStr = tmpRs!ARID
        Set tmpRng = ERcol.Item("ARID").Find(What:=TmpStr, LookIn:=xlValues, _
                                                LookAt:=xlPart, SearchOrder:=xlByColumns, _
                                                SearchDirection:=xlNext, _
                                                MatchCase:=False)
        If Not tmpRng Is Nothing Then
            nowRowNum = tmpRng.Row
            tmpStr1 = Replace(CStr(ERcol.Item("PrimePartNumber").Range("A" & nowRowNum).Value), "'", "''")
            tmpStr2 = Replace(CStr(ERcol.Item("PrimePartDescription").Range("A" & nowRowNum).Value), "'", "''")
            tmpSqlValStr(1) = Trim(CStr(ERcol.Item("Rank").Range("A" & nowRowNum).Value))
            tmpSqlValStr(2) = Trim(CStr(ERcol.Item("12MonthDemand").Range("A" & nowRowNum).Value))
            tmpSqlValStr(3) = Trim(CStr(ERcol.Item("MonthOfSupply").Range("A" & nowRowNum).Value))
            tmpSqlValStr(4) = Trim(CStr(ERcol.Item("OnHandGood").Range("A" & nowRowNum).Value))
            For tmpInt = 1 To 4 Step 1
                If tmpSqlValStr(tmpInt) = "" Then
                    tmpSqlValStr(tmpInt) = "NULL"
                End If
            Next
            nowDbExecSQL "UPDATE ARs SET Rank=" & tmpSqlValStr(1) _
                            & ",PrimePartNumber='" & tmpStr1 _
                            & "',PrimePartDescription='" & tmpStr2 _
                            & "',12MonthDemand=" & tmpSqlValStr(2) _
                            & ",MonthOfSupply=" & tmpSqlValStr(3) _
                            & ",OnHandGood=" & tmpSqlValStr(4) _
                            & ",RecordLastModTime=Now() WHERE ARID='" & TmpStr _
                            & "' AND (Rank " & IIf(tmpSqlValStr(1) = "NULL", "IS NOT NULL", "IS NULL OR Rank<>" & tmpSqlValStr(1)) _
                            & " OR PrimePartNumber IS NULL OR PrimePartNumber<>'" & tmpStr1 _
                            & "' OR PrimePartDescription IS NULL OR PrimePartDescription<>'" & tmpStr2 _
                            & "' OR [12MonthDemand] " & IIf(tmpSqlValStr(2) = "NULL", "IS NOT NULL", "IS NULL OR [12MonthDemand]<>" & tmpSqlValStr(2)) _
                            & " OR MonthOfSupply " & IIf(tmpSqlValStr(3) = "NULL", "IS NOT NULL", "IS NULL OR MonthOfSupply<>" & tmpSqlValStr(3)) _
                            & " OR OnHandGood " & IIf(tmpSqlValStr(4) = "NULL", "IS NOT NULL", "IS NULL OR OnHandGood<>" & tmpSqlValStr(4)) _
                            & ");", dbFailOnError
        End If
        tmpRs.MoveNext
    Loop
        
    anInfo "Finish Reading The 2 Source Excel Files"
    ARreportWB.Close SaveChanges:=False
    EngRvwListWB.Close SaveChanges:=False
    xlApp.Quit
    Set ARcol = Nothing
    Set ERcol = Nothing
    Set ARreport = Nothing
    Set ARreportWB = Nothing
    Set EngRvwList = Nothing
    Set EngRvwListWB = Nothing
    Set xlApp = Nothing
    Exit Sub
UnableToOpenFileARReport:
    MsgBox "Unable To Open The File AR Report At" & Chr(10) & Chr(9) & ARreportFilePath
    Exit Sub
UnableToOpenFileEngRvwList:
    MsgBox "Unable To Open The File EngRvw List At" & Chr(10) & Chr(9) & EngRvwListFilePath
    Exit Sub
FailedToParseHeaderFieldsInARreport:
    MsgBox "Unable To Parse The Header Fields In AR Report"
    Exit Sub
FailedToParseHeaderFieldsInEngRvwList:
    MsgBox "Unable To Parse The Header Fields In EngRvw List"
    Exit Sub
UninitializedTableARStatus:
    MsgBox "Table ARStatus Is Not Initialized With Three Basic Records" & Chr(10) & "'Open', 'Closure Requested', 'Closed'"
    Exit Sub
End Sub

Private Sub Command1_Click()
   nowDbExecSQL "INSERT INTO [ARs-ARMilestones];"
    
End Sub
